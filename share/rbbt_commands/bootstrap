#!/usr/bin/env ruby

require 'rbbt-util'
require 'rbbt/util/simpleopt'

$0 = "rbbt #{$previous_commands*""} #{ File.basename(__FILE__) }" if $previous_commands

options = SOPT.setup <<EOF

Description

$ #{$0} [options] 

-h--help Print this help
-t--tasks* task to bootstrap
-rwt--remote_workflow_tasks* Load a yaml file describing remote workflow tasks
-g--graylist_remove Remove graylist 
-p--principal 
-c--coding
-n--non_synonymous
-nh--no_hyper Ignore hypermutated samples (defaut=true)
--concurrent* Number of concurrent processes
-W--workflows* Load a list of workflows
EOF

if options[:help]
  if defined? rbbt_usage
    rbbt_usage 
  else
    puts SOPT.usage
  end
  exit 0
end

tasks = options[:tasks] || "firestar,kinmut"

options[:no_hyper] = true if options[:no_hyper].nil?

begin
 Workflow.require_workflow "MutSig"
rescue
end

begin
 Workflow.require_workflow "Pandrugs"
rescue
end

raise ParameterException unless tasks

if options[:workflows]
  require 'rbbt/workflow'
  workflows = options[:workflows].split(',')
  workflows.each do |workflow|
    workflow.strip!
    Workflow.require_workflow workflow
  end
end

tasks = tasks.split(/,\s*/)

if options[:remote_workflow_tasks]
 yaml_text = Open.read(options[:remote_workflow_tasks])
 remote_workflow_tasks = YAML.load(yaml_text)
 Workflow.process_remote_tasks(remote_workflow_tasks)
end

donors = PCAWG.all_donors.uniq
abbrs = PCAWG.all_abbreviations
meta = PCAWG.all_meta
other = PCAWG.donor_other_cohorts.glob('*').collect{|f| File.basename f }

num = options[:concurrent] || "10"
tasks.each do |task|
 Misc.bootstrap(donors, num.to_i) do |donor|
  sample = Sample.setup(donor)
  begin
   job = sample.send(task, :job, options)
   job.produce
  rescue
  end
  nil
 end

 Misc.bootstrap( abbrs + meta.collect{|m| "meta=" << m} + other.collect{|m| "other=" << m}, num.to_i) do |study|
  study = study + '.NOHYPER' if options[:no_hyper]
  study = Study.setup(study.dup)
  begin
   job = study.send(task, :job, options)
   job.produce
  rescue NoMethodError
  rescue
   Log.exception $!
  end
  nil
 end
end

